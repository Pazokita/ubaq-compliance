scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
  user(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
  ): User @find

  users(
    name: String @where(operator: "like")
  ): [User!]! @paginate(defaultCount: 10)

  events: [Event!]! @all
  doctors: [Doctor!]! @all
  laboratories: [Laboratory!]! @all
}

type Mutation {
  createEvent(
    title: String!
    date: Date!
    location: String!
    budget_allocated: Float!
    budget_used: Float
    doctor_id: ID!
    laboratory_id: ID!
  ): Event! @create

  createDoctor(
    first_name: String!
    last_name: String!
    specialty: String
  ): Doctor! @create

  createLaboratory(
    name: String!
    city: String
  ): Laboratory! @create
}

type User {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

type Event {
  id: ID!
  title: String!
  date: Date!
  location: String!
  budget_allocated: Float!
  budget_used: Float!
  doctor: Doctor! @belongsTo
  laboratory: Laboratory! @belongsTo
  created_at: DateTime!
  updated_at: DateTime!
}

type Doctor {
  id: ID!
  first_name: String!
  last_name: String!
  specialty: String
  created_at: DateTime!
  updated_at: DateTime!
}

type Laboratory {
  id: ID!
  name: String!
  city: String
  created_at: DateTime!
  updated_at: DateTime!
}